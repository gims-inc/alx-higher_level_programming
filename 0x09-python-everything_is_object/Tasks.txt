	What function would you use to print the type of an object?
	Write the name of the function in the file, without ().
								[type]0

	How do you get the variable identifier (which is the memory address in the CPython implementation)?
	Write the name of the function in the file, without ().
								[id]1

	In the following code, do a and b point to the same object? Answer with Yes or No.

		>>> a = 89
		>>> b = 100					[No]2
	
	In the following code, do a and b point to the same object? Answer with Yes or No.

		>>> a = 89
		>>> b = 89					[Yes]3

	In the following code, do a and b point to the same object? Answer with Yes or No.

		>>> a = 89
		>>> b = a					[Yes]4

	In the following code, do a and b point to the same object? Answer with Yes or No.

		>>> a = 89
		>>> b = a + 1					[No]5

	What do these 3 lines print?

		>>> s1 = "Best School"
		>>> s2 = s1
		>>> print(s1 == s2)				[True]6

	What do these 3 lines print?

		>>> s1 = "Best"
		>>> s2 = s1
		>>> print(s1 is s2)				[True]7

	What do these 3 lines print?

		>>> s1 = "Best School"
		>>> s2 = "Best School"
		>>> print(s1 == s2)				[True]8

	What do these 3 lines print?

		>>> s1 = "Best School"
		>>> s2 = "Best School"
		>>> print(s1 is s2)				[True]9
	
	What do these 3 lines print?

		>>> l1 = [1, 2, 3]
		>>> l2 = [1, 2, 3] 
		>>> print(l1 == l2)				[Tru]10

	What do these 3 lines print?

		>>> l1 = [1, 2, 3]
		>>> l2 = [1, 2, 3] 
		>>> print(l1 is l2)				[False]11

	What do these 3 lines print?

		>>> l1 = [1, 2, 3]
		>>> l2 = l1
		>>> print(l1 == l2)				[True]12

	What do these 3 lines print?

		>>> l1 = [1, 2, 3]
		>>> l2 = l1
		>>> print(l1 is l2)				[True]13

	What does this script print?

		l1 = [1, 2, 3]
		l2 = l1
		l1.append(4)
		print(l2)					[1, 2, 3, 4]

	
	What does this script print?

		l1 = [1, 2, 3]
		l2 = l1
		l1 = l1 + [4]
		print(l2)					[1, 2, 3]

	What does this script print?

		def increment(n):
		    n += 1

		a = 1
		increment(a)
		print(a) 					[1]

	What does this script print?

		def increment(n):
    			n.append(4)

		l = [1, 2, 3]
		increment(l)
		print(l)					[1, 2, 3, 4]

	What does this script print?

		def assign_value(n, v):
			n = v

		l1 = [1, 2, 3]
		l2 = [4, 5, 6]
		assign_value(l1, l2)
		print(l1)					[1, 2, 3 ]

	

	Write a function def copy_list(l): that returns a copy of a list.

    		The input list can contain any type of objects
    		Your file should be maximum 3-line long (no documentation needed)
    		You are not allowed to import any module
	
	19-main.py

	#!/usr/bin/python3
	copy_list = __import__('19-copy_list').copy_list

	my_list = [1, 2, 3]
	print(my_list)

	new_list = copy_list(my_list)

	print(my_list)
	print(new_list)

	print(new_list == my_list)
	print(new_list is my_list)
	
	
	a = ()

	Is a a tuple? Answer with Yes or No.
								[Yes]20

	a = (1, 2)

	Is a a tuple? Answer with Yes or No.
								[Yes]

	a = (1)

	Is a a tuple? Answer with Yes or No.
								[No]

	a = (1, )

	Is a a tuple? Answer with Yes or No.
								[Yes]

	What does this script print?

		a = (1)
		b = (1)
		a is b						[True] 24

	What does this script print?

		a = (1, 2)
		b = (1, 2)
		a is b						[False] 25

	What does this script print?

		a = ()
		b = ()
		a is b						[True] 26

	>>> id(a)
	139926795932424
	>>> a
	[1, 2, 3, 4]
	>>> a = a + [5]
	>>> id(a)
	Will the last line of this script print 139926795932424? Answer with Yes or No. [No] 27

	
	>>> a
	[1, 2, 3]
	>>> id (a)
	139926795932424
	>>> a += [4]
	>>> id(a)

	Will the last line of this script print 139926795932424? Answer with Yes or No. [Yes]28


	Write a function magic_string() that returns a string “BestSchool” n times the number of the iteration (see code):

	    Format: see example
	    Your file should be maximum 4-line long (no documentation needed)
	    You are not allowed to import any module

	100-main.py

	#!/usr/bin/python3
	magic_string = __import__('100-magic_string').magic_string

	for i in range(10):
	    print(magic_string())

	
	Write a class LockedClass with no class or object attribute, that prevents the user from dynamically creating new instance attributes, 
	except if the new instance attribute is called first_name.

    	You are not allowed to import any module

	101-main.py
	#!/usr/bin/python3
	LockedClass = __import__('101-locked_class').LockedClass

	lc = LockedClass()
	lc.first_name = "John"
	try:
	    lc.last_name = "Snow"
	except Exception as e:
	    print("[{}] {}".format(e.__class__.__name__, e))


					./101-main.py
					[AttributeError] 'LockedClass' object has no attribute 'last_name'
========================================================================================================================================================
